{"name":"Botany","tagline":"A css/js library for creating dynamic tree-view components","body":"# Botany.js\r\n\r\n## Introduction\r\n\r\nBotany is a JavaScript/CSS library for creating tree view components using *declarative techniques*. This means that,\r\nunlike imperative (but still very powerful) libraries like [jsTree](http://www.jstree.com/), botany trees can be built\r\nusing the DOM templating of JavaScript frameworks like Angular, React etc., and adding or removing elements from the\r\ntree can be done without needing to tell the tree to update or redraw anything.\r\n\r\n## Installation\r\n\r\nRun `npm install botany` or `git clone https://github.com/TMiguelT/botany` to get the latest version of the library,\r\nthen copy the contents of `dist` directory to your project (for example, you might put it in `static/libs/botany`).\r\nThis directory includes the stylesheet (`botany.css`), the script (`botany.js`) and all the relevant image files (`.svg`)\r\n\r\nThen you'll need to reference both the stylesheet and the script in your HTML. You'll also need to include jQuery\r\nbecause it's required by botany. Of course in a real website you'd put the scripts at the bottom of the page and\r\nthe stylesheets in the `<head>`:\r\n\r\n```html\r\n<link rel=\"stylesheet\" href=\"static/libs/botany/botany.css\">\r\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js\"></script>\r\n<script src=\"static/libs/botany/git adbotany.min.js\"></script>\r\n```\r\n\r\n## Usage\r\n\r\nTo use botany, you first need to create an unordered list with the class `botany`, and give it a class indicating which\r\ntheme to use (see [themes](#themes) for more information). For example, your list element might look like this:\r\n\r\n```html\r\n<ul class=\"botany lines\"></ul>\r\n```\r\n\r\nThen all you need to do is call `$(\"selector\").botany()` on the list you just created. It may seem redundant to add the\r\nclass and call a jQuery function but the class determines the styling of the list, meaning that the style won't suddenly\r\nchange when you call the plugin. All the plugin does is setup the even handlers for opening and closing the nodes.\r\n\r\n## Themes\r\n\r\nThe themes (like `lines`) in the above example, are one of the following:\r\n\r\n* lines\r\n* no-lines\r\n* no-markers\r\n\r\nThemes determine which images to use as the marker (indicating a node is open or closed), as well as the horizontal\r\nand vertical lines that make up the tree. The default three themes are pretty self explanatory, but if you want to\r\nwrite your own theme (use your own custom images), read the section on [custom themes](#custom-themes)\r\n\r\n## Basic Customization\r\n\r\nAs shown in the demo files (have a look in the demo directory), a Botany tree consists of a `<ul>` element with the class\r\n`botany`. You can have any DOM structure inside this tree, but there are some things to note:\r\n\r\n* Any `<ul>` or `<li>` elements inside the `.botany` element will be styled.\r\n\r\n* The `.open` class indicates when a node is open, and can be manually added to nodes that you want to start open (by\r\ndefault nodes are closed). This class is also automatically toggled whenever a node is opened or closed by a user, so\r\nyou can write your own custom styles based on this.\r\n\r\n* The `.botany-open` and `.botany-closed` classes are for manually specifying an open/closed indicator. Such an element\r\nshould be a direct child of an `<li>` and these should only be used when using a theme that has no indicators itself\r\n(i.e. the no-markers theme). Have a look at the demo-bootstrap.html file for an example of using the `.botany-open` and\r\n`.botany-closed` classes.\r\n\r\n## Custom Themes\r\n\r\nTo create a custom theme for botany, all you need to do is add a `.json` file to the `src/css/themes` directory containing\r\npaths to the image files you want to use as the open and closed markers, and the vertical and horizontal lines. It's\r\nprobably a good idea to use the existing json files as a template. Also note that you don't have to use SVGs as your\r\nimages, you can use any image format that CSS supports (png, jpeg etc.)\r\n\r\nThen, just add the name of that json file to the themesList variable in botany.styl. It currently looks like this:\r\n\r\n`themesList = \"lines\", \"no-lines\", \"no-markers\"`\r\n\r\nAdding a custom theme would make it more like this (if you had a my-theme.json file in the themes directory)\r\n\r\n`themesList = \"lines\", \"no-lines\", \"no-markers\", \"my-theme\"`\r\n\r\nThen, to re-create the stylesheet, just run `gulp build`, and the files in the dist directory will be rebuilt. Of course\r\nto do this you'll have to install the dev dependencies, so don't use the `--production` flag for `npm install`. You can\r\nalso rebuild botany if you want to make any other changes to the main stylesheet (botany.styl) or the main script (script.js)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}